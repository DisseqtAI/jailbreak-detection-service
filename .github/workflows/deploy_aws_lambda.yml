name: Build and Push Lambda to ECR

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Tag for the Lambda Docker image'
        required: true
        default: 'lambda-latest'
      dockerfile:
        description: 'Dockerfile to use (e.g., Dockerfile.aws.lambda or custom Lambda Dockerfile)'
        required: true
        default: 'Dockerfile.aws.lambda'
        type: choice
        options:
          - Dockerfile.aws.lambda
          - Dockerfile.aws.lambda.slim
          - Dockerfile.aws.lambda.custom
      lambda_function_name:
        description: 'AWS Lambda function name to update (leave empty to skip Lambda update)'
        required: false
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: 841095141312.dkr.ecr.eu-west-1.amazonaws.com
  ECR_REPOSITORY: ml-models

jobs:
  deploy_lambda:
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::841095141312:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          sudo docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build and push Lambda Docker image
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.event.inputs.image_tag }}
          DOCKERFILE: ${{ github.event.inputs.dockerfile }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          echo "Building AWS Lambda Docker image using $DOCKERFILE for $ENVIRONMENT environment with tag $IMAGE_TAG..."
          sudo docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE .
          
          # Also tag with environment and lambda indicator
          sudo docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:lambda-$ENVIRONMENT

          echo "Pushing to ECR..."
          sudo docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          sudo docker push $ECR_REGISTRY/$ECR_REPOSITORY:lambda-$ENVIRONMENT
          
          echo "Lambda image pushed to ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Lambda image also tagged as: $ECR_REGISTRY/$ECR_REPOSITORY:lambda-$ENVIRONMENT"
          
          # Save the full image URI for potential Lambda function update
          echo "LAMBDA_IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update Lambda Function (if specified)
        if: ${{ github.event.inputs.lambda_function_name != '' }}
        env:
          LAMBDA_FUNCTION_NAME: ${{ github.event.inputs.lambda_function_name }}
        run: |
          echo "Updating Lambda function $LAMBDA_FUNCTION_NAME with new container image..."
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $LAMBDA_IMAGE_URI
            
          echo "Waiting for Lambda function update to complete..."
          aws lambda wait function-updated-v2 --function-name $LAMBDA_FUNCTION_NAME
          
          echo "Lambda function $LAMBDA_FUNCTION_NAME updated successfully with image: $LAMBDA_IMAGE_URI" 