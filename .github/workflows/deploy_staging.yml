name: Deploy to Staging Cloud Run

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Tag for the Docker image'
        required: true
        default: 'staging'
      dockerfile:
        description: 'Dockerfile to use'
        required: true
        default: 'Dockerfile.gcp'
        type: choice
        options:
          - Dockerfile.gcp
          - Dockerfile
      memory:
        description: 'Memory allocation for Cloud Run service (in Gi)'
        required: true
        default: '8'
        type: choice
        options:
          - '2'
          - '4'
          - '8'
          - '16'
          - '32'
      cpu:
        description: 'CPU allocation for Cloud Run service'
        required: true
        default: '4'
        type: choice
        options:
          - '1'
          - '2'
          - '4'
          - '8'
      min_instances:
        description: 'Minimum number of instances'
        required: true
        default: '1'
      max_instances:
        description: 'Maximum number of instances'
        required: true
        default: '10'
      concurrency:
        description: 'Number of concurrent requests per instance'
        required: true
        default: '80'
      timeout:
        description: 'Request timeout in seconds'
        required: true
        default: '300'
      public_access:
        description: 'Allow unauthenticated access'
        required: true
        default: true
        type: boolean

env:
  PROJECT_ID: staging-466807
  SERVICE_NAME: jailbreak-detection-service
  REGION: us-central1

jobs:
  deploy:
    name: Deploy to Staging Cloud Run
    runs-on: ubuntu-latest

    concurrency:
      group: staging-deployment
      cancel-in-progress: false

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup authentication to Google Cloud
      - id: 'auth'
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Install the gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Configure Docker to use gcloud credentials
      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      # Build and push the Docker image
      - name: Build and push Docker image
        env:
          IMAGE_TAG: ${{ github.event.inputs.image_tag }}
          DOCKERFILE: ${{ github.event.inputs.dockerfile }}
        run: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          COMMIT_SHA=$(git rev-parse HEAD)
          SHORT_SHA=$(git rev-parse --short HEAD)
          UNIQUE_TAG="staging-${SHORT_SHA}-$(date +%s)"
          IMAGE_NAME="${REGION}-docker.pkg.dev/${PROJECT_ID}/${SERVICE_NAME}/${SERVICE_NAME}"
          
          echo "Building Docker image for staging..."
          echo "Image name: ${IMAGE_NAME}"
          echo "Unique tag: ${UNIQUE_TAG}"
          
          docker build \
            --platform linux/amd64 \
            --build-arg BUILD_DATE="${BUILD_DATE}" \
            --build-arg VCS_REF="${COMMIT_SHA}" \
            --build-arg VERSION="${IMAGE_TAG}" \
            --build-arg ENVIRONMENT="staging" \
            -t ${IMAGE_NAME}:${IMAGE_TAG} \
            -t ${IMAGE_NAME}:${UNIQUE_TAG} \
            -f ${DOCKERFILE} .
          
          docker push ${IMAGE_NAME}:${IMAGE_TAG}
          docker push ${IMAGE_NAME}:${UNIQUE_TAG}
          
          echo "IMAGE_URI=${IMAGE_NAME}:${IMAGE_TAG}" >> $GITHUB_ENV
          echo "UNIQUE_TAG=${UNIQUE_TAG}" >> $GITHUB_ENV

      # Deploy to Cloud Run
      - name: Deploy to Cloud Run
        env:
          MEMORY: ${{ github.event.inputs.memory }}
          CPU: ${{ github.event.inputs.cpu }}
          MIN_INSTANCES: ${{ github.event.inputs.min_instances }}
          MAX_INSTANCES: ${{ github.event.inputs.max_instances }}
          CONCURRENCY: ${{ github.event.inputs.concurrency }}
          TIMEOUT: ${{ github.event.inputs.timeout }}
          PUBLIC_ACCESS: ${{ github.event.inputs.public_access }}
        run: |
          echo "Deploying to Cloud Run: ${SERVICE_NAME}"
          
          gcloud run deploy ${SERVICE_NAME} \
            --image ${IMAGE_URI} \
            --platform managed \
            --region ${REGION} \
            --memory ${MEMORY}Gi \
            --cpu ${CPU} \
            --min-instances ${MIN_INSTANCES} \
            --max-instances ${MAX_INSTANCES} \
            --concurrency ${CONCURRENCY} \
            --timeout ${TIMEOUT}s \
            --service-account github-actions@staging-466807.iam.gserviceaccount.com \
            --set-env-vars "ENVIRONMENT=staging,API_AUTH_TOKEN=${{ secrets.API_AUTH_TOKEN }}" \
            --labels "env=staging,commit_sha=${GITHUB_SHA},tag=${UNIQUE_TAG}" \
            ${{ github.event.inputs.public_access == 'true' && '--allow-unauthenticated' || '--no-allow-unauthenticated' }}
          
          SERVICE_URL=$(gcloud run services describe ${SERVICE_NAME} --platform managed --region ${REGION} --format="value(status.url)")
          echo "Deployed service URL: ${SERVICE_URL}"
          echo "SERVICE_URL=${SERVICE_URL}" >> $GITHUB_ENV

      # Configure IAM policy if public access enabled
      - name: Configure IAM policy for public access
        if: ${{ github.event.inputs.public_access == 'true' }}
        run: |
          echo "Setting IAM policy to allow public access..."
          gcloud run services add-iam-policy-binding ${SERVICE_NAME} \
            --region=${REGION} \
            --member="allUsers" \
            --role="roles/run.invoker"

      # Test the deployment
      - name: Test Deployment
        run: |
          echo "Testing deployment health endpoint..."
          
          MAX_RETRIES=5
          RETRY_COUNT=0
          HTTP_STATUS=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ $HTTP_STATUS -ne 200 ]; do
            echo "Attempt $((RETRY_COUNT+1)) of ${MAX_RETRIES}..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${SERVICE_URL}/health || echo "failed")
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "Health check successful!"
              break
            else
              echo "Health check returned status: $HTTP_STATUS"
              RETRY_COUNT=$((RETRY_COUNT+1))
              echo "Waiting 10 seconds before next attempt..."
              sleep 10
            fi
          done
          
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "Health check failed after ${MAX_RETRIES} attempts."
            exit 1
          fi

      # Create deployment record
      - name: Create deployment record
        run: |
          DEPLOY_INFO=$(cat << EOF
          {
            "service": "${SERVICE_NAME}",
            "environment": "staging",
            "region": "${REGION}",
            "image": "${IMAGE_URI}",
            "url": "${SERVICE_URL}",
            "deployed_at": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
            "deployed_by": "${{ github.actor }}",
            "github_sha": "${{ github.sha }}",
            "github_ref": "${{ github.ref }}",
            "github_workflow": "${{ github.workflow }}"
          }
          EOF
          )
          
          echo "$DEPLOY_INFO" > deployment-staging.json
          echo "Deployment record created:"
          cat deployment-staging.json

      # Upload deployment record as an artifact
      - name: Upload deployment record
        uses: actions/upload-artifact@v4
        with:
          name: deployment-staging
          path: deployment-staging.json
          retention-days: 90 